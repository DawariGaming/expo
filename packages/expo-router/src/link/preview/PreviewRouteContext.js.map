{"version":3,"file":"PreviewRouteContext.js","sourceRoot":"","sources":["PreviewRouteContext.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,aAAa,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAU3C,MAAM,CAAC,MAAM,mBAAmB,GAAG,aAAa,CAAsC,SAAS,CAAC,CAAC;AAIjG;;GAEG;AACH,MAAM,UAAU,cAAc;IAC5B,MAAM,aAAa,GAAG,GAAG,CAAC,mBAAmB,CAAC,CAAC;IAC/C,OAAO;QACL,SAAS,EAAE,CAAC,CAAC,aAAa;QAC1B,GAAG,aAAa;KACjB,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,YAAY;IAC1B,MAAM,EAAE,SAAS,EAAE,GAAG,cAAc,EAAE,CAAC;IACvC,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["'use client';\n\nimport { createContext, use } from 'react';\n\nimport type { UnknownOutputParams } from '../../types';\n\nexport interface PreviewRouteContextType {\n  params: UnknownOutputParams;\n  pathname: string;\n  segments: string[];\n}\n\nexport const PreviewRouteContext = createContext<PreviewRouteContextType | undefined>(undefined);\n\ntype UsePreviewInfo = { isPreview: boolean } & Partial<PreviewRouteContextType>;\n\n/**\n * Returns information about the current route if it is displayed in preview mode.\n */\nexport function usePreviewInfo(): UsePreviewInfo {\n  const paramsContext = use(PreviewRouteContext);\n  return {\n    isPreview: !!paramsContext,\n    ...paramsContext,\n  };\n}\n\n/**\n * Hook to determine if the current route is rendered inside a preview.\n *\n *  @returns {boolean} - True if the current route is rendered inside a preview, false otherwise.\n */\nexport function useIsPreview(): boolean {\n  const { isPreview } = usePreviewInfo();\n  return isPreview;\n}\n"]}