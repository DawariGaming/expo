{"version":3,"file":"routes.js","sourceRoot":"","sources":["../../src/types/routes.ts"],"names":[],"mappings":"","sourcesContent":["import type { ComponentType } from 'react';\n\nexport type ErrorBoundaryProps = {\n  /** A function that will re-render the route component by clearing the `error` state. */\n  retry: () => Promise<void>;\n  /** The error that was thrown. */\n  error: Error;\n};\n\nexport type DynamicConvention = { name: string; deep: boolean; notFound?: boolean };\n\ntype Params = Record<string, string | string[]>;\n\nexport type LoadedRoute = {\n  ErrorBoundary?: ComponentType<ErrorBoundaryProps>;\n  default?: ComponentType<any>;\n  unstable_settings?: Record<string, any>;\n  getNavOptions?: (args: any) => any;\n  generateStaticParams?: (props: { params?: Params }) => Params[];\n};\n\nexport type LoadedMiddleware = Pick<LoadedRoute, 'default' | 'unstable_settings'>;\n\nexport type MiddlewareNode = {\n  /** Context Module ID. Used to resolve the middleware module */\n  contextKey: string;\n  /** Loads middleware into memory. Returns the exports from +middleware.ts */\n  loadRoute: () => Partial<LoadedMiddleware>;\n};\n\nexport type RouteNode = {\n  /** The type of RouteNode */\n  type: 'route' | 'api' | 'layout' | 'redirect' | 'rewrite';\n  /** Load a route into memory. Returns the exports from a route. */\n  loadRoute: () => Partial<LoadedRoute>;\n  /** Loaded initial route name. */\n  initialRouteName?: string;\n  /** Nested routes */\n  children: RouteNode[];\n  /** Is the route a dynamic path */\n  dynamic: null | DynamicConvention[];\n  /** `index`, `error-boundary`, etc. */\n  route: string;\n  /** Context Module ID, used for matching children. */\n  contextKey: string;\n  /** Redirect Context Module ID, used for matching children. */\n  destinationContextKey?: string;\n  /** Is the redirect permanent. */\n  permanent?: boolean;\n  /** Added in-memory */\n  generated?: boolean;\n  /** Internal screens like the directory or the auto 404 should be marked as internal. */\n  internal?: boolean;\n  /** File paths for async entry modules that should be included in the initial chunk request to ensure the runtime JavaScript matches the statically rendered HTML representation. */\n  entryPoints?: string[];\n  /** HTTP methods for this route. If undefined, assumed to be ['GET'] */\n  methods?: string[];\n  /** Middleware function for server-side request processing. Only present on the root route node. */\n  middleware?: MiddlewareNode;\n};\n"]}