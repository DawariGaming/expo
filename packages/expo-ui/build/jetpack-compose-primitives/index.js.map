{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/jetpack-compose-primitives/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import { requireNativeView } from 'expo';\nimport { ColorValue, Platform, StyleProp, ViewStyle } from 'react-native';\n\nimport { ExpoModifier } from '../types';\n\ntype PrimitiveBaseProps = {\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: string;\n};\n\nexport type HorizontalArrangement =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'spaceBetween'\n  | 'spaceAround'\n  | 'spaceEvenly';\nexport type VerticalArrangement =\n  | 'top'\n  | 'bottom'\n  | 'center'\n  | 'spaceBetween'\n  | 'spaceAround'\n  | 'spaceEvenly';\nexport type HorizontalAlignment = 'start' | 'end' | 'center';\nexport type VerticalAlignment = 'top' | 'bottom' | 'center';\n\ntype LayoutBaseProps = {\n  children?: React.ReactNode;\n  horizontalArrangement?: HorizontalArrangement;\n  verticalArrangement?: VerticalArrangement;\n  horizontalAlignment?: HorizontalAlignment;\n  verticalAlignment?: VerticalAlignment;\n  modifiers?: ExpoModifier[];\n} & PrimitiveBaseProps;\n\n//#region Box Component\nexport type BoxProps = Pick<LayoutBaseProps, 'children' | 'modifiers'>;\nconst BoxNativeView: React.ComponentType<BoxProps> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'BoxView') : null;\nexport function Box(props: BoxProps) {\n  if (!BoxNativeView) {\n    return null;\n  }\n  return (\n    <BoxNativeView\n      {...props}\n      // @ts-ignore\n      modifiers={props.modifiers?.map((m) => m.__expo_shared_object_id__)}\n    />\n  );\n}\n//#endregion\n\n//#region Row Component\nexport type RowProps = LayoutBaseProps;\nconst RowNativeView: React.ComponentType<RowProps> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'RowView') : null;\nexport function Row(props: RowProps) {\n  if (!RowNativeView) {\n    return null;\n  }\n  return (\n    <RowNativeView\n      {...props}\n      // @ts-ignore\n      modifiers={props.modifiers?.map((m) => m.__expo_shared_object_id__)}\n    />\n  );\n}\n//#endregion\n\n//#region Column Component\nexport type ColumnProps = LayoutBaseProps;\nconst ColumnNativeView: React.ComponentType<ColumnProps> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'ColumnView') : null;\nexport function Column(props: ColumnProps) {\n  if (!ColumnNativeView) {\n    return null;\n  }\n  return (\n    <ColumnNativeView\n      {...props}\n      // @ts-ignore\n      modifiers={props.modifiers?.map((m) => m.__expo_shared_object_id__)}\n    />\n  );\n}\n//#endregion\n\n//#region Container Component\nexport type ContainerProps = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  modifiers?: ExpoModifier[];\n} & PrimitiveBaseProps;\nconst ContainerNativeView: React.ComponentType<ColumnProps> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'ContainerView') : null;\nexport function Container(props: ContainerProps) {\n  if (!ContainerNativeView) {\n    return null;\n  }\n  return (\n    <ContainerNativeView\n      {...props}\n      // @ts-ignore\n      modifiers={props.modifiers?.map((m) => m.__expo_shared_object_id__)}\n    />\n  );\n}\n//#endregion\n\n//#region Text Component\n\nexport type TextFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport type TextProps = {\n  children: string;\n  color?: ColorValue;\n  fontSize?: number;\n  fontWeight?: TextFontWeight;\n} & PrimitiveBaseProps;\n\nconst TextNativeView: React.ComponentType<Omit<TextProps, 'children'> & { text: string }> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'TextView') : null;\ntype NativeTextProps = Omit<TextProps, 'children'> & {\n  text: string;\n};\nfunction transformTextProps(props: TextProps): NativeTextProps {\n  const { children, ...restProps } = props;\n  return {\n    ...restProps,\n    text: children ?? '',\n    // @ts-ignore\n    modifiers: props.modifiers?.map((m) => m.__expo_shared_object_id__),\n  };\n}\nexport function Text(props: TextProps) {\n  if (!TextNativeView) {\n    return null;\n  }\n  return <TextNativeView {...transformTextProps(props)} />;\n}\n//#endregion\n"]}