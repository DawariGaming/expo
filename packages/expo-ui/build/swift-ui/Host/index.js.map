{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Host/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AA4CrE,MAAM,cAAc,GAAmC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAE/F;;GAEG;AACH,MAAM,UAAU,IAAI,CAAC,KAAgB;IACnC,MAAM,EACJ,aAAa,EACb,qBAAqB,EACrB,uBAAuB,EACvB,eAAe,EACf,SAAS,EACT,GAAG,SAAS,EACb,GAAG,KAAK,CAAC;IACV,MAAM,yBAAyB,GAC7B,qBAAqB;QACrB,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;IAC/E,MAAM,2BAA2B,GAC/B,uBAAuB;QACvB,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;IAEjF,OAAO,CACL,CAAC,cAAc,CACb,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,qBAAqB,CAAC,CAAC,yBAAyB,CAAC,CACjD,uBAAuB,CAAC,CAAC,2BAA2B,CAAC,CACrD,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CACzE,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;YACrB,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;QACvB,CAAC,CAAC,CACF,IAAI,SAAS,CAAC;IACd,mBAAmB;IACnB,eAAe,EACf,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle, type ColorSchemeName } from 'react-native';\n\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport type HostProps = {\n  /**\n   * When true, the host view will update its size in the React Native view tree to match the content's layout from SwiftUI.\n   * @default false\n   */\n  matchContents?: boolean | { vertical?: boolean; horizontal?: boolean };\n\n  /**\n   * When true, the host view will update its vertical size in the React Native view tree to match the content's layout from SwiftUI.\n   * @default false\n   */\n  matchContentsVertical?: boolean;\n\n  /**\n   * When true, the host view will update its horizontal size in the React Native view tree to match the content's layout from SwiftUI.\n   * @default false\n   */\n  matchContentsHorizontal?: boolean;\n\n  /**\n   * When true and no explicit size is provided, the host will use the viewport size as the proposed size for SwiftUI layout.\n   * This is particularly useful for SwiftUI views that need to fill their available space, such as `Form`.\n   * @default false\n   */\n  useViewportSizeMeasurement?: boolean;\n\n  /**\n   * Callback function that is triggered when the SwiftUI content completes its layout.\n   * Provides the current dimensions of the content, which may change as the content updates.\n   */\n  onLayoutContent?: (event: { nativeEvent: { width: number; height: number } }) => void;\n\n  /**\n   * The color scheme of the host view.\n   */\n  colorScheme?: ColorSchemeName;\n\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n} & CommonViewModifierProps;\n\nconst HostNativeView: React.ComponentType<HostProps> = requireNativeView('ExpoUI', 'HostView');\n\n/**\n * A hosting component for SwiftUI views.\n */\nexport function Host(props: HostProps) {\n  const {\n    matchContents,\n    matchContentsVertical,\n    matchContentsHorizontal,\n    onLayoutContent,\n    modifiers,\n    ...restProps\n  } = props;\n  const matchContentsVerticalProp =\n    matchContentsVertical ??\n    (typeof matchContents === 'object' ? matchContents.vertical : matchContents);\n  const matchContentsHorizontalProp =\n    matchContentsHorizontal ??\n    (typeof matchContents === 'object' ? matchContents.horizontal : matchContents);\n\n  return (\n    <HostNativeView\n      modifiers={modifiers}\n      matchContentsVertical={matchContentsVerticalProp}\n      matchContentsHorizontal={matchContentsHorizontalProp}\n      {...(modifiers ? createViewModifierEventListener(modifiers) : undefined)}\n      onLayoutContent={(e) => {\n        onLayoutContent?.(e);\n      }}\n      {...restProps}\n      // @ts-expect-error\n      measureableNode\n    />\n  );\n}\n"]}