{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/ContentUnavailableView/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAEzC,OAAO,EAAE,oBAAoB,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAC9D,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AAoBrE,MAAM,gCAAgC,GACpC,iBAAiB,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;AAExD;;;GAGG;AACH,SAAS,oCAAoC,CAC3C,KAAkC;IAElC,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO;QACL,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,SAAS;KACb,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,KAAkC;IACvE,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;QACzB,OAAO,CAAC,oBAAoB,CAAC,aAAa,CAAC,wBAAwB,EAAG,CAAC;IACzE,CAAC;IACD,OAAO,CAAC,gCAAgC,CAAC,IAAI,oCAAoC,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/F,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { MissingHostErrorView, isMissingHost } from '../Host';\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport interface ContentUnavailableViewProps extends CommonViewModifierProps {\n  /**\n   * A short title that describes why the content is not available.\n   */\n  title?: string;\n\n  /**\n   * SF Symbol indicating why the content is not available.\n   */\n  systemImage?: string;\n\n  /**\n   * Description of why the content is not available.\n   */\n  description?: string;\n}\n\nconst ContentUnavailableViewNativeView: React.ComponentType<ContentUnavailableViewProps> =\n  requireNativeView('ExpoUI', 'ContentUnavailableView');\n\n/**\n * Displays a native Swift UI ContentUnavailableView.\n * @platform ios 17.0+\n */\nfunction transformContentUnavailableViewProps(\n  props: ContentUnavailableViewProps\n): ContentUnavailableViewProps {\n  const { modifiers, ...restProps } = props;\n  return {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...restProps,\n  };\n}\n\nexport function ContentUnavailableView(props: ContentUnavailableViewProps) {\n  if (isMissingHost(props)) {\n    return <MissingHostErrorView componentName=\"ContentUnavailableView\" />;\n  }\n  return <ContentUnavailableViewNativeView {...transformContentUnavailableViewProps(props)} />;\n}\n"]}