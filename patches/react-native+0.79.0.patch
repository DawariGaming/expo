diff --git a/node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js b/node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js
index 1c11fd4..99a3047 100644
--- a/node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js
+++ b/node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js
@@ -8,8 +8,8 @@
  * @format
  */
 
-import type {ExtendedError} from '../../Core/ExtendedError';
-import type {LogLevel} from './LogBoxLog';
+import type { ExtendedError } from '../../Core/ExtendedError';
+import type { LogLevel } from './LogBoxLog';
 import type {
   Category,
   ComponentStack,
@@ -23,7 +23,7 @@ import parseErrorStack from '../../Core/Devtools/parseErrorStack';
 import NativeDevSettings from '../../NativeModules/specs/NativeDevSettings';
 import NativeLogBox from '../../NativeModules/specs/NativeLogBox';
 import LogBoxLog from './LogBoxLog';
-import {parseLogBoxException} from './parseLogBoxLog';
+import { parseLogBoxException } from './parseLogBoxLog';
 import * as React from 'react';
 
 export type LogBoxLogs = Set<LogBoxLog>;
@@ -41,7 +41,7 @@ export type Observer = (
     logs: LogBoxLogs,
     isDisabled: boolean,
     selectedLogIndex: number,
-  }>,
+  }>
 ) => void;
 
 export type IgnorePattern = string | RegExp;
@@ -68,7 +68,7 @@ type AppInfo = $ReadOnly<{
   onPress?: ?() => void,
 }>;
 
-const observers: Set<{observer: Observer, ...}> = new Set();
+const observers: Set<{ observer: Observer, ... }> = new Set();
 const ignorePatterns: Set<IgnorePattern> = new Set();
 let appInfo: ?() => AppInfo = null;
 let logs: LogBoxLogs = new Set();
@@ -101,10 +101,7 @@ function getNextState() {
   };
 }
 
-export function reportLogBoxError(
-  error: ExtendedError,
-  componentStack?: string,
-): void {
+export function reportLogBoxError(error: ExtendedError, componentStack?: string): void {
   const ExceptionsManager = require('../../Core/ExceptionsManager').default;
 
   error.message = `${LOGBOX_ERROR_MESSAGE}\n\n${error.message}`;
@@ -135,7 +132,7 @@ function handleUpdate(): void {
     updateTimeout = setImmediate(() => {
       updateTimeout = null;
       const nextState = getNextState();
-      observers.forEach(({observer}) => observer(nextState));
+      observers.forEach(({ observer }) => observer(nextState));
     });
   }
 }
@@ -179,7 +176,7 @@ function appendNewLog(newLog: LogBoxLog) {
       }
     }, OPTIMISTIC_WAIT_TIME);
 
-    newLog.symbolicate(status => {
+    newLog.symbolicate((status) => {
       if (addPendingLog && status !== 'PENDING') {
         addPendingLog();
         clearTimeout(optimisticTimeout);
@@ -200,14 +197,14 @@ function appendNewLog(newLog: LogBoxLog) {
 export function addLog(log: LogData): void {
   if (hostTargetSessionObserverSubscription == null) {
     hostTargetSessionObserverSubscription = DebuggerSessionObserver.subscribe(
-      hasActiveSession => {
+      (hasActiveSession) => {
         if (hasActiveSession) {
           clearWarnings();
         } else {
           // Reset the flag so that we can show the message again if new warning was emitted
           hasShownFuseboxWarningsMigrationMessage = false;
         }
-      },
+      }
     );
   }
 
@@ -239,7 +236,7 @@ export function addLog(log: LogData): void {
           category: log.category,
           componentStack: log.componentStack,
           componentStackType: log.componentStackType || 'legacy',
-        }),
+        })
       );
     } catch (error) {
       reportLogBoxError(error);
@@ -310,7 +307,7 @@ export function setSelectedLog(proposedNewIndex: number): void {
 }
 
 export function clearWarnings(): void {
-  const newLogs = Array.from(logs).filter(log => log.level !== 'warn');
+  const newLogs = Array.from(logs).filter((log) => log.level !== 'warn');
   if (newLogs.length !== logs.size) {
     logs = new Set(newLogs);
     setSelectedLog(-1);
@@ -319,9 +316,7 @@ export function clearWarnings(): void {
 }
 
 export function clearErrors(): void {
-  const newLogs = Array.from(logs).filter(
-    log => log.level !== 'error' && log.level !== 'fatal',
-  );
+  const newLogs = Array.from(logs).filter((log) => log.level !== 'error' && log.level !== 'fatal');
   if (newLogs.length !== logs.size) {
     logs = new Set(newLogs);
     setSelectedLog(-1);
@@ -355,9 +350,7 @@ export function getIgnorePatterns(): $ReadOnlyArray<IgnorePattern> {
   return Array.from(ignorePatterns);
 }
 
-export function addIgnorePatterns(
-  patterns: $ReadOnlyArray<IgnorePattern>,
-): void {
+export function addIgnorePatterns(patterns: $ReadOnlyArray<IgnorePattern>): void {
   const existingSize = ignorePatterns.size;
   // The same pattern may be added multiple times, but adding a new pattern
   // can be expensive so let's find only the ones that are new.
@@ -382,9 +375,7 @@ export function addIgnorePatterns(
   // This allows adding an ignore pattern anywhere in the codebase.
   // Without this, if you ignore a pattern after the a log is created,
   // then we would keep showing the log.
-  logs = new Set(
-    Array.from(logs).filter(log => !isMessageIgnored(log.message.content)),
-  );
+  logs = new Set(Array.from(logs).filter((log) => !isMessageIgnored(log.message.content)));
   handleUpdate();
 }
 
@@ -401,7 +392,7 @@ export function isDisabled(): boolean {
 }
 
 export function observe(observer: Observer): Subscription {
-  const subscription = {observer};
+  const subscription = { observer };
   observers.add(subscription);
 
   observer(getNextState());
@@ -429,15 +420,13 @@ type SubscribedComponent = React.ComponentType<
   }>,
 >;
 
-export function withSubscription(
-  WrappedComponent: SubscribedComponent,
-): React.ComponentType<{}> {
+export function withSubscription(WrappedComponent: SubscribedComponent): React.ComponentType<{}> {
   class LogBoxStateSubscription extends React.Component<Props, State> {
-    static getDerivedStateFromError(): {hasError: boolean} {
-      return {hasError: true};
+    static getDerivedStateFromError(): { hasError: boolean } {
+      return { hasError: true };
     }
 
-    componentDidCatch(err: Error, errorInfo: {componentStack: string, ...}) {
+    componentDidCatch(err: Error, errorInfo: { componentStack: string, ... }) {
       /* $FlowFixMe[class-object-subtyping] added when improving typing for
        * this parameters */
       // $FlowFixMe[incompatible-call]
@@ -454,11 +443,13 @@ export function withSubscription(
     };
 
     render(): React.Node {
-      if (this.state.hasError) {
-        // This happens when the component failed to render, in which case we delegate to the native redbox.
-        // We can't show anyback fallback UI here, because the error may be with <View> or <Text>.
-        return null;
-      }
+      // if (this.state.hasError) {
+      //   // This happens when the component failed to render, in which case we delegate to the native redbox.
+      //   // We can't show anyback fallback UI here, because the error may be with <View> or <Text>.
+      //   return null;
+      // }
+
+      console.log('HEYHYE');
 
       return (
         <WrappedComponent
@@ -470,7 +461,7 @@ export function withSubscription(
     }
 
     componentDidMount(): void {
-      this._subscription = observe(data => {
+      this._subscription = observe((data) => {
         this.setState(data);
       });
     }
@@ -506,6 +497,6 @@ function showFuseboxWarningsMigrationMessageOnce() {
           NativeDevSettings.openDebugger();
         }
       },
-    }),
+    })
   );
 }
diff --git a/node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js b/node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js
index 3ccf93a..daf2f72 100644
--- a/node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js
+++ b/node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js
@@ -22,8 +22,19 @@ type Props = $ReadOnly<{
   isDisabled?: ?boolean,
 }>;
 
+import LogBoxExpo from '@expo/metro-runtime/src/error-overlay/logbox-rn-polyfill';
+
 export class _LogBoxInspectorContainer extends React.Component<Props> {
   render(): React.Node {
+    return (
+      <LogBoxExpo
+        onDismiss={this._handleDismiss}
+        onMinimize={this._handleMinimize}
+        onChangeSelectedIndex={this._handleSetSelectedLog}
+        logs={this.props.logs}
+        selectedIndex={this.props.selectedLogIndex}
+      />
+    );
     return (
       <View style={StyleSheet.absoluteFill}>
         <LogBoxInspector
@@ -41,7 +52,7 @@ export class _LogBoxInspectorContainer extends React.Component<Props> {
     // Here we handle the cases when the log is dismissed and it
     // was either the last log, or when the current index
     // is now outside the bounds of the log array.
-    const {selectedLogIndex, logs} = this.props;
+    const { selectedLogIndex, logs } = this.props;
     const logsArray = Array.from(logs);
     if (selectedLogIndex != null) {
       if (logsArray.length - 1 <= 0) {
@@ -63,6 +74,4 @@ export class _LogBoxInspectorContainer extends React.Component<Props> {
   };
 }
 
-export default (LogBoxData.withSubscription(
-  _LogBoxInspectorContainer,
-): React.ComponentType<{}>);
+export default (LogBoxData.withSubscription(_LogBoxInspectorContainer): React.ComponentType<{}>);
